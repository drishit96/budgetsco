generator client {
  provider        = "prisma-client-js"
  previewFeatures = []
}

datasource db {
  provider     = "postgresql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model User {
  id                   String                 @id
  createdAt            DateTime               @default(now())
  emailId              String?                @db.VarChar(254)
  mfaSecret            String?
  notificationTokens   NotificationToken[]
  transactions         Transaction[]
  monthlyTarget        MonthlyTarget[]
  categoryAmount       CategoryAmount[]
  userPreference       UserPreference?
  paymentModeAmount    PaymentModeAmount[]
  recurringTransaction RecurringTransaction[]
  customCategories     CustomCategory[]

  @@index([emailId])
}

model NotificationToken {
  userId String
  token  String
  user   User   @relation(fields: [userId], references: [id])

  @@id([userId, token])
  @@index([token])
}

model MonthlyTarget {
  userId         String
  date           DateTime
  budget         Decimal  @db.Decimal(16, 4)
  expense        Decimal  @db.Decimal(22, 4)
  income         Decimal  @db.Decimal(22, 4)
  incomeEarned   Decimal  @db.Decimal(16, 4)
  investment     Decimal  @db.Decimal(22, 4)
  investmentDone Decimal  @db.Decimal(16, 4)
  user           User     @relation(fields: [userId], references: [id])

  @@id([userId, date])
}

model CategoryAmount {
  userId   String
  date     DateTime
  category String
  type     String   @db.VarChar(10)
  amount   Decimal  @db.Decimal(22, 4)
  budget   Decimal? @db.Decimal(16, 4)
  user     User     @relation(fields: [userId], references: [id])

  @@id([userId, date, type, category])
  @@index([userId, date, type, amount])
}

model PaymentModeAmount {
  userId          String
  date            DateTime
  transactionType String   @db.VarChar(10)
  paymentMode     String
  amount          Decimal  @db.Decimal(22, 4)
  budget          Decimal? @db.Decimal(16, 4)
  user            User     @relation(fields: [userId], references: [id])

  @@id([userId, date, transactionType, paymentMode])
  @@index([userId, date, transactionType, paymentMode, amount], map: "PaymentModeAmount_userId_d6310b-342e-4566-9d91-4c4bdd285dbc_idx")
}

model Transaction {
  id             String   @id @default(nanoid(18))
  createdAt      DateTime @default(now())
  createdAtLocal DateTime
  description    String?  @db.VarChar(250)
  amount         Decimal  @db.Decimal(22, 4)
  type           String   @db.VarChar(10)
  category       String
  category2      String?
  category3      String?
  paymentMode    String
  user           User     @relation(fields: [userId], references: [id])
  userId         String

  @@index([userId, createdAtLocal, type, category])
}

model UserPreference {
  userId               String   @unique(map: "UserPreference_userId_idx")
  currency             String?  @db.VarChar(3)
  timezone             String   @db.VarChar(64)
  locale               String   @db.VarChar(15)
  paymentGateway       String?  @db.VarChar(3)
  isActiveSubscription Boolean  @default(false)
  isMFAOn              Boolean  @default(false)
  collectAnalytics     Boolean?
  lastModified         Float    @default(0)
  user                 User?    @relation(fields: [userId], references: [id])

  @@index([userId, lastModified])
}

model RecurringTransaction {
  id            String   @id @default(nanoid(12))
  occurrence    String   @db.VarChar(5)
  interval      Int      @db.SmallInt
  amount        Decimal  @db.Decimal(22, 4)
  type          String   @db.VarChar(10)
  category      String
  category2     String?
  category3     String?
  paymentMode   String
  description   String?  @db.VarChar(250)
  executionDate DateTime
  isNotified    Boolean  @default(false)
  userId        String
  user          User?    @relation(fields: [userId], references: [id])

  @@index([userId, executionDate])
  @@index([executionDate, isNotified])
}

model CustomCategory {
  userId String
  type   String @db.VarChar(10)
  value  String @db.VarChar(250)
  user   User?  @relation(fields: [userId], references: [id])

  @@id([userId, type, value])
}


model GPBSubscription {
  purchaseToken String  @id @db.VarChar(250)
  userId        String
  isLatest      Boolean @default(false)
  state         String  @db.VarChar(40)
  expiry        Float?
  cancelReason  String?

  @@index([userId, isLatest])
}

model STRSubscription {
  userId         String  @id
  customerId     String
  subscriptionId String
  state          String  @db.VarChar(20)
  expiry         Float
  cancelAtExpiry Boolean @default(false)

  @@index([subscriptionId])
}
