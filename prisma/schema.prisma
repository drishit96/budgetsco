generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["extendedWhereUnique"]
}

datasource db {
  provider             = "mysql"
  url                  = env("DATABASE_URL")
  relationMode         = "prisma"
}

model User {
  id                   String                 @id
  createdAt            DateTime               @default(now())
  emailId              String?                @db.VarChar(254)
  mfaSecret            String?
  notificationTokens   NotificationToken[]
  transactions         Transaction[]
  monthlyTarget        MonthlyTarget[]
  categoryAmount       CategoryAmount[]
  userPreference       UserPreference?
  paymentModeAmount    PaymentModeAmount[]
  recurringTransaction RecurringTransaction[]
  customCategories     CustomCategory[]

  @@index([emailId])
}

model NotificationToken {
  userId String
  token  String
  user   User   @relation(fields: [userId], references: [id])

  @@unique([userId, token])
  @@index([token])
}

model MonthlyTarget {
  userId         String
  date           DateTime
  budget         Float
  expense        Float
  income         Float
  incomeEarned   Float
  investment     Float
  investmentDone Float
  user           User     @relation(fields: [userId], references: [id])

  @@unique([userId, date])
}

enum TransactionType {
  expense
  income
  investment
}

model CategoryAmount {
  userId   String
  date     DateTime
  category String
  type     TransactionType
  amount   Float
  budget   Float?
  user     User             @relation(fields: [userId], references: [id])

  @@unique([userId, date, type, category])
  @@index([userId, date, type, amount])
}

model PaymentModeAmount {
  userId          String
  date            DateTime
  transactionType TransactionType
  paymentMode     String
  amount          Float
  budget          Float?
  user            User     @relation(fields: [userId], references: [id])

  @@unique([userId, date, transactionType, paymentMode])
  @@index([userId, date, transactionType, paymentMode, amount])
}

model Transaction {
  id             String           @id @default(nanoid(18))
  createdAt      DateTime         @default(now())
  createdAtLocal DateTime
  description    String?          @db.VarChar(250)
  amount         Float
  type           TransactionType
  category       String
  category2      String?
  category3      String?
  paymentMode    String
  user           User             @relation(fields: [userId], references: [id])
  userId         String

  @@index([userId, createdAtLocal, type, category])
}

enum PaymentGateway {
  GPB // Google Play Billing
  STR // Stripe
}

model UserPreference {
  userId                String          @unique
  currency              String?         @db.VarChar(3)
  timezone              String          @db.VarChar(64)
  locale                String          @db.VarChar(15)
  paymentGateway        PaymentGateway?
  isActiveSubscription  Boolean         @default(false)
  isMFAOn               Boolean         @default(false)
  lastModified          Float           @default(0) @db.Double()
  user                  User?           @relation(fields: [userId], references: [id])

  @@index([userId, lastModified])
}

model RecurringTransaction {
  id            String            @id @default(nanoid(12))
  occurrence    String            @db.VarChar(5)
  interval      Int
  amount        Float
  type          TransactionType
  category      String
  category2     String?
  category3     String?
  paymentMode   String
  description   String?           @db.VarChar(250)
  executionDate DateTime
  isNotified    Boolean           @default(false)
  user          User?             @relation(fields: [userId], references: [id])
  userId        String

  @@index([userId, executionDate])
  @@index([executionDate, isNotified])
}

model CustomCategory {
  userId   String
  type     TransactionType  
  value    String           @db.VarChar(250)
  user     User?            @relation(fields: [userId], references: [id])

  @@unique([userId, type, value])
}

enum GPBSubscriptionState {
  SUBSCRIPTION_STATE_ACTIVE
  SUBSCRIPTION_STATE_CANCELED
  SUBSCRIPTION_STATE_IN_GRACE_PERIOD
  SUBSCRIPTION_STATE_ON_HOLD
  SUBSCRIPTION_STATE_PAUSED
  SUBSCRIPTION_STATE_EXPIRED
}

model GPBSubscription {
  purchaseToken String               @id @db.VarChar(250)
  userId        String
  isLatest      Boolean              @default(false)
  state         GPBSubscriptionState
  expiry        Float?               @db.Double()
  cancelReason  String?

  @@index([userId, isLatest])
}

enum STRSubscriptionState {
  trialing
  active
  past_due
  incomplete
  incomplete_expired
  canceled
  unpaid
}

model STRSubscription {
  userId          String  @id
  customerId      String
  subscriptionId  String
  state           STRSubscriptionState
  expiry          Float
  cancelAtExpiry  Boolean @default(false)

  @@index([subscriptionId])
}